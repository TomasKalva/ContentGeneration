//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class Animatable : Freezable {
  internal new static Animatable CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new Animatable(cPtr, cMemoryOwn);
  }

  internal Animatable(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(Animatable obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  protected Animatable() {
  }

  public void BeginAnimation(DependencyProperty dp, AnimationTimeline animation) {
    this.BeginAnimation(dp, animation, HandoffBehavior.SnapshotAndReplace);
  }

  public void BeginAnimation(DependencyProperty dp, AnimationTimeline animation, HandoffBehavior handoffBehavior) {
    if (dp == null) {
      throw new ArgumentNullException("dp");
    }
    if (animation != null && !animation.IsValidTarget(dp)) {
      throw new ArgumentException("AnimationTimeline type mismatch: " + animation.GetType() +
          " on property " + dp.OwnerType.GetType() + "." + dp.Name + " of type " + dp.PropertyType);
    }
    if (base.IsFrozen) {
      throw new InvalidOperationException("Resource is frozen and cannot be animated");
    }
    if (animation == null) {
      base.ClearAnimation(dp);
    }
    else {
      Storyboard storyboard = new Storyboard();
      storyboard.Children.Add(animation);
      storyboard.Begin(FrameworkElement.FindTreeElement(this), handoffBehavior);
    }
  }

  internal new static IntPtr Extend(string typeName) {
    return NoesisGUI_PINVOKE.Extend_Animatable(Marshal.StringToHGlobalAnsi(typeName));
  }
}

}

