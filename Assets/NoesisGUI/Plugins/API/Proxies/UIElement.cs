//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class UIElement : Visual {
  internal new static UIElement CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new UIElement(cPtr, cMemoryOwn);
  }

  internal UIElement(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(UIElement obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  #region Routed Events
  public void AddHandler(RoutedEvent routedEvent, Delegate handler) {
    EventHandlerStore.AddHandler(this, routedEvent, handler);
  }

  public void RemoveHandler(RoutedEvent routedEvent, Delegate handler) {
    EventHandlerStore.RemoveHandler(this, routedEvent, handler);
  }

  public event RoutedEventHandler GotFocus {
    add {
      AddHandler(GotFocusEvent, value);
    }
    remove {
      RemoveHandler(GotFocusEvent, value);
    }
  }

  public event RoutedEventHandler LostFocus {
    add {
      AddHandler(LostFocusEvent, value);
    }
    remove {
      RemoveHandler(LostFocusEvent, value);
    }
  }

  public event MouseEventHandler GotMouseCapture {
    add {
      AddHandler(GotMouseCaptureEvent, value);
    }
    remove {
      RemoveHandler(GotMouseCaptureEvent, value);
    }
  }

  public event MouseEventHandler LostMouseCapture {
    add {
      AddHandler(LostMouseCaptureEvent, value);
    }
    remove {
      RemoveHandler(LostMouseCaptureEvent, value);
    }
  }

  public event MouseEventHandler MouseEnter {
    add {
      AddHandler(MouseEnterEvent, value);
    }
    remove {
      RemoveHandler(MouseEnterEvent, value);
    }
  }

  public event MouseEventHandler MouseLeave {
    add {
      AddHandler(MouseLeaveEvent, value);
    }
    remove {
      RemoveHandler(MouseLeaveEvent, value);
    }
  }

  public event MouseEventHandler PreviewMouseMove {
    add {
      AddHandler(PreviewMouseMoveEvent, value);
    }
    remove {
      RemoveHandler(PreviewMouseMoveEvent, value);
    }
  }

  public event MouseEventHandler MouseMove {
    add {
      AddHandler(MouseMoveEvent, value);
    }
    remove {
      RemoveHandler(MouseMoveEvent, value);
    }
  }

  public event MouseButtonEventHandler PreviewMouseDown {
    add {
      AddHandler(PreviewMouseDownEvent, value);
    }
    remove {
      RemoveHandler(PreviewMouseDownEvent, value);
    }
  }

  public event MouseButtonEventHandler MouseDown {
    add {
      AddHandler(MouseDownEvent, value);
    }
    remove {
      RemoveHandler(MouseDownEvent, value);
    }
  }

  public event MouseButtonEventHandler PreviewMouseUp {
    add {
      AddHandler(PreviewMouseUpEvent, value);
    }
    remove {
      RemoveHandler(PreviewMouseUpEvent, value);
    }
  }

  public event MouseButtonEventHandler MouseUp {
    add {
      AddHandler(MouseUpEvent, value);
    }
    remove {
      RemoveHandler(MouseUpEvent, value);
    }
  }

  public event MouseButtonEventHandler PreviewMouseLeftButtonDown {
    add {
      AddHandler(PreviewMouseLeftButtonDownEvent, value);
    }
    remove {
      RemoveHandler(PreviewMouseLeftButtonDownEvent, value);
    }
  }

  public event MouseButtonEventHandler MouseLeftButtonDown {
    add {
      AddHandler(MouseLeftButtonDownEvent, value);
    }
    remove {
      RemoveHandler(MouseLeftButtonDownEvent, value);
    }
  }

  public event MouseButtonEventHandler PreviewMouseLeftButtonUp {
    add {
      AddHandler(PreviewMouseLeftButtonUpEvent, value);
    }
    remove {
      RemoveHandler(PreviewMouseLeftButtonUpEvent, value);
    }
  }

  public event MouseButtonEventHandler MouseLeftButtonUp {
    add {
      AddHandler(MouseLeftButtonUpEvent, value);
    }
    remove {
      RemoveHandler(MouseLeftButtonUpEvent, value);
    }
  }

  public event MouseButtonEventHandler PreviewMouseRightButtonDown {
    add {
      AddHandler(PreviewMouseRightButtonDownEvent, value);
    }
    remove {
      RemoveHandler(PreviewMouseRightButtonDownEvent, value);
    }
  }

  public event MouseButtonEventHandler MouseRightButtonDown {
    add {
      AddHandler(MouseRightButtonDownEvent, value);
    }
    remove {
      RemoveHandler(MouseRightButtonDownEvent, value);
    }
  }

  public event MouseButtonEventHandler PreviewMouseRightButtonUp {
    add {
      AddHandler(PreviewMouseRightButtonUpEvent, value);
    }
    remove {
      RemoveHandler(PreviewMouseRightButtonUpEvent, value);
    }
  }

  public event MouseButtonEventHandler MouseRightButtonUp {
    add {
      AddHandler(MouseRightButtonUpEvent, value);
    }
    remove {
      RemoveHandler(MouseRightButtonUpEvent, value);
    }
  }

  public event MouseWheelEventHandler PreviewMouseWheel {
    add {
      AddHandler(PreviewMouseWheelEvent, value);
    }
    remove {
      RemoveHandler(PreviewMouseWheelEvent, value);
    }
  }

  public event MouseWheelEventHandler MouseWheel {
    add {
      AddHandler(MouseWheelEvent, value);
    }
    remove {
      RemoveHandler(MouseWheelEvent, value);
    }
  }

  public event QueryCursorEventHandler QueryCursor {
    add {
      AddHandler(QueryCursorEvent, value);
    }
    remove {
      RemoveHandler(QueryCursorEvent, value);
    }
  }

  public event KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus {
    add {
      AddHandler(PreviewGotKeyboardFocusEvent, value);
    }
    remove {
      RemoveHandler(PreviewGotKeyboardFocusEvent, value);
    }
  }

  public event KeyboardFocusChangedEventHandler GotKeyboardFocus {
    add {
      AddHandler(GotKeyboardFocusEvent, value);
    }
    remove {
      RemoveHandler(GotKeyboardFocusEvent, value);
    }
  }

  public event KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus {
    add {
      AddHandler(PreviewLostKeyboardFocusEvent, value);
    }
    remove {
      RemoveHandler(PreviewLostKeyboardFocusEvent, value);
    }
  }

  public event KeyboardFocusChangedEventHandler LostKeyboardFocus {
    add {
      AddHandler(LostKeyboardFocusEvent, value);
    }
    remove {
      RemoveHandler(LostKeyboardFocusEvent, value);
    }
  }

  public event KeyEventHandler PreviewKeyDown {
    add {
      AddHandler(PreviewKeyDownEvent, value);
    }
    remove {
      RemoveHandler(PreviewKeyDownEvent, value);
    }
  }

  public event KeyEventHandler KeyDown {
    add {
      AddHandler(KeyDownEvent, value);
    }
    remove {
      RemoveHandler(KeyDownEvent, value);
    }
  }

  public event KeyEventHandler PreviewKeyUp {
    add {
      AddHandler(PreviewKeyUpEvent, value);
    }
    remove {
      RemoveHandler(PreviewKeyUpEvent, value);
    }
  }

  public event KeyEventHandler KeyUp {
    add {
      AddHandler(KeyUpEvent, value);
    }
    remove {
      RemoveHandler(KeyUpEvent, value);
    }
  }

  public event TextCompositionEventHandler PreviewTextInput {
    add {
      AddHandler(PreviewTextInputEvent, value);
    }
    remove {
      RemoveHandler(PreviewTextInputEvent, value);
    }
  }

  public event TextCompositionEventHandler TextInput {
    add {
      AddHandler(TextInputEvent, value);
    }
    remove {
      RemoveHandler(TextInputEvent, value);
    }
  }

  public event TouchEventHandler GotTouchCapture {
    add {
      AddHandler(GotTouchCaptureEvent, value);
    }
    remove {
      RemoveHandler(GotTouchCaptureEvent, value);
    }
  }

  public event TouchEventHandler LostTouchCapture {
    add {
      AddHandler(LostTouchCaptureEvent, value);
    }
    remove {
      RemoveHandler(LostTouchCaptureEvent, value);
    }
  }

  public event TouchEventHandler PreviewTouchMove {
    add {
      AddHandler(PreviewTouchMoveEvent, value);
    }
    remove {
      RemoveHandler(PreviewTouchMoveEvent, value);
    }
  }

  public event TouchEventHandler TouchMove {
    add {
      AddHandler(TouchMoveEvent, value);
    }
    remove {
      RemoveHandler(TouchMoveEvent, value);
    }
  }

  public event TouchEventHandler TouchEnter {
    add {
      AddHandler(TouchEnterEvent, value);
    }
    remove {
      RemoveHandler(TouchEnterEvent, value);
    }
  }

  public event TouchEventHandler TouchLeave {
    add {
      AddHandler(TouchLeaveEvent, value);
    }
    remove {
      RemoveHandler(TouchLeaveEvent, value);
    }
  }

  public event TouchEventHandler PreviewTouchDown {
    add {
      AddHandler(PreviewTouchDownEvent, value);
    }
    remove {
      RemoveHandler(PreviewTouchDownEvent, value);
    }
  }

  public event TouchEventHandler TouchDown {
    add {
      AddHandler(TouchDownEvent, value);
    }
    remove {
      RemoveHandler(TouchDownEvent, value);
    }
  }

  public event TouchEventHandler PreviewTouchUp {
    add {
      AddHandler(PreviewTouchUpEvent, value);
    }
    remove {
      RemoveHandler(PreviewTouchUpEvent, value);
    }
  }

  public event TouchEventHandler TouchUp {
    add {
      AddHandler(TouchUpEvent, value);
    }
    remove {
      RemoveHandler(TouchUpEvent, value);
    }
  }

  public event TappedEventHandler Tapped {
    add {
      AddHandler(TappedEvent, value);
    }
    remove {
      RemoveHandler(TappedEvent, value);
    }
  }

  public event DoubleTappedEventHandler DoubleTapped {
    add {
      AddHandler(DoubleTappedEvent, value);
    }
    remove {
      RemoveHandler(DoubleTappedEvent, value);
    }
  }

  public event HoldingEventHandler Holding {
    add {
      AddHandler(HoldingEvent, value);
    }
    remove {
      RemoveHandler(HoldingEvent, value);
    }
  }

  public event RightTappedEventHandler RightTapped {
    add {
      AddHandler(RightTappedEvent, value);
    }
    remove {
      RemoveHandler(RightTappedEvent, value);
    }
  }

  public event ManipulationStartingEventHandler ManipulationStarting {
    add {
      AddHandler(ManipulationStartingEvent, value);
    }
    remove {
      RemoveHandler(ManipulationStartingEvent, value);
    }
  }

  public event ManipulationStartedEventHandler ManipulationStarted {
    add {
      AddHandler(ManipulationStartedEvent, value);
    }
    remove {
      RemoveHandler(ManipulationStartedEvent, value);
    }
  }

  public event ManipulationDeltaEventHandler ManipulationDelta {
    add {
      AddHandler(ManipulationDeltaEvent, value);
    }
    remove {
      RemoveHandler(ManipulationDeltaEvent, value);
    }
  }

  public event ManipulationInertiaStartingEventHandler ManipulationInertiaStarting {
    add {
      AddHandler(ManipulationInertiaStartingEvent, value);
    }
    remove {
      RemoveHandler(ManipulationInertiaStartingEvent, value);
    }
  }

  public event ManipulationCompletedEventHandler ManipulationCompleted {
    add {
      AddHandler(ManipulationCompletedEvent, value);
    }
    remove {
      RemoveHandler(ManipulationCompletedEvent, value);
    }
  }

  public event QueryContinueDragEventHandler PreviewQueryContinueDrag {
    add {
      AddHandler(PreviewQueryContinueDragEvent, value);
    }
    remove {
      RemoveHandler(PreviewQueryContinueDragEvent, value);
    }
  }

  public event QueryContinueDragEventHandler QueryContinueDrag {
    add {
      AddHandler(QueryContinueDragEvent, value);
    }
    remove {
      RemoveHandler(QueryContinueDragEvent, value);
    }
  }

  public event GiveFeedbackEventHandler PreviewGiveFeedback {
    add {
      AddHandler(PreviewGiveFeedbackEvent, value);
    }
    remove {
      RemoveHandler(PreviewGiveFeedbackEvent, value);
    }
  }

  public event GiveFeedbackEventHandler GiveFeedback {
    add {
      AddHandler(GiveFeedbackEvent, value);
    }
    remove {
      RemoveHandler(GiveFeedbackEvent, value);
    }
  }

  public event DragEventHandler PreviewDragOver {
    add {
      AddHandler(PreviewDragOverEvent, value);
    }
    remove {
      RemoveHandler(PreviewDragOverEvent, value);
    }
  }

  public event DragEventHandler DragOver {
    add {
      AddHandler(DragOverEvent, value);
    }
    remove {
      RemoveHandler(DragOverEvent, value);
    }
  }

  public event DragEventHandler PreviewDragEnter {
    add {
      AddHandler(PreviewDragEnterEvent, value);
    }
    remove {
      RemoveHandler(PreviewDragEnterEvent, value);
    }
  }

  public event DragEventHandler DragEnter {
    add {
      AddHandler(DragEnterEvent, value);
    }
    remove {
      RemoveHandler(DragEnterEvent, value);
    }
  }

  public event DragEventHandler PreviewDragLeave {
    add {
      AddHandler(PreviewDragLeaveEvent, value);
    }
    remove {
      RemoveHandler(PreviewDragLeaveEvent, value);
    }
  }

  public event DragEventHandler DragLeave {
    add {
      AddHandler(DragLeaveEvent, value);
    }
    remove {
      RemoveHandler(DragLeaveEvent, value);
    }
  }

  public event DragEventHandler PreviewDrop {
    add {
      AddHandler(PreviewDropEvent, value);
    }
    remove {
      RemoveHandler(PreviewDropEvent, value);
    }
  }

  public event DragEventHandler Drop {
    add {
      AddHandler(DropEvent, value);
    }
    remove {
      RemoveHandler(DropEvent, value);
    }
  }
  #endregion

  #region Non-routed Events
  protected void AddEventHandler(string eventId, Delegate handler) {
    EventHandlerStore.AddHandler(this, eventId, handler);
  }

  protected void RemoveEventHandler(string eventId, Delegate handler) {
    EventHandlerStore.RemoveHandler(this, eventId, handler);
  }

  public event DependencyPropertyChangedEventHandler FocusableChanged {
    add {
      AddEventHandler("FocusableChanged", value);
    }
    remove {
      RemoveEventHandler("FocusableChanged", value);
    }
  }

  public event DependencyPropertyChangedEventHandler IsEnabledChanged {
    add {
      AddEventHandler("IsEnabledChanged", value);
    }
    remove {
      RemoveEventHandler("IsEnabledChanged", value);
    }
  }

  public event DependencyPropertyChangedEventHandler IsHitTestVisibleChanged {
    add {
      AddEventHandler("IsHitTestVisibleChanged", value);
    }
    remove {
      RemoveEventHandler("IsHitTestVisibleChanged", value);
    }
  }

  public event DependencyPropertyChangedEventHandler IsVisibleChanged {
    add {
      AddEventHandler("IsVisibleChanged", value);
    }
    remove {
      RemoveEventHandler("IsVisibleChanged", value);
    }
  }

  public event DependencyPropertyChangedEventHandler IsMouseCapturedChanged {
    add {
      AddEventHandler("IsMouseCapturedChanged", value);
    }
    remove {
      RemoveEventHandler("IsMouseCapturedChanged", value);
    }
  }

  public event DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged {
    add {
      AddEventHandler("IsMouseCaptureWithinChanged", value);
    }
    remove {
      RemoveEventHandler("IsMouseCaptureWithinChanged", value);
    }
  }

  public event DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged {
    add {
      AddEventHandler("IsMouseDirectlyOverChanged", value);
    }
    remove {
      RemoveEventHandler("IsMouseDirectlyOverChanged", value);
    }
  }

  public event DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged {
    add {
      AddEventHandler("IsKeyboardFocusedChanged", value);
    }
    remove {
      RemoveEventHandler("IsKeyboardFocusedChanged", value);
    }
  }

  public event DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged {
    add {
      AddEventHandler("IsKeyboardFocusWithinChanged", value);
    }
    remove {
      RemoveEventHandler("IsKeyboardFocusWithinChanged", value);
    }
  }
  #endregion

  #region Animation
  public void BeginAnimation(DependencyProperty dp, AnimationTimeline animation) {
    this.BeginAnimation(dp, animation, HandoffBehavior.SnapshotAndReplace);
  }

  public void BeginAnimation(DependencyProperty dp, AnimationTimeline animation, HandoffBehavior handoffBehavior) {
    if (dp == null) {
      throw new ArgumentNullException("dp");
    }
    if (animation != null && !animation.IsValidTarget(dp)) {
      throw new ArgumentException("AnimationTimeline type mismatch: " + animation.GetType() +
          " on property " + dp.OwnerType.GetType() + "." + dp.Name + " of type " + dp.PropertyType);
    }
    if (base.IsSealed) {
      throw new InvalidOperationException("Element is sealed and cannot be animated");
    }
    if (animation == null) {
      base.ClearAnimation(dp);
    }
    else {
      Storyboard storyboard = new Storyboard();
      storyboard.Children.Add(animation);
      storyboard.Begin(FrameworkElement.FindTreeElement(this), handoffBehavior);
    }
  }
  #endregion

  public UIElement() {
  }

  protected override IntPtr CreateCPtr(Type type, out bool registerExtend) {
    if (type == typeof(UIElement)) {
      registerExtend = false;
      return NoesisGUI_PINVOKE.new_UIElement();
    }
    else {
      return base.CreateExtendCPtr(type, out registerExtend);
    }
  }

  public bool CaptureMouse() {
    bool ret = NoesisGUI_PINVOKE.UIElement_CaptureMouse(swigCPtr);
    return ret;
  }

  public void ReleaseMouseCapture() {
    NoesisGUI_PINVOKE.UIElement_ReleaseMouseCapture(swigCPtr);
  }

  public bool CaptureTouch(ulong touchDevice) {
    bool ret = NoesisGUI_PINVOKE.UIElement_CaptureTouch(swigCPtr, touchDevice);
    return ret;
  }

  public bool ReleaseTouchCapture(ulong touchDevice) {
    bool ret = NoesisGUI_PINVOKE.UIElement_ReleaseTouchCapture(swigCPtr, touchDevice);
    return ret;
  }

  public void ReleaseAllTouchCaptures() {
    NoesisGUI_PINVOKE.UIElement_ReleaseAllTouchCaptures(swigCPtr);
  }

  public UIElement GetTouchCaptured(ulong touchDevice) {
    IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_GetTouchCaptured(swigCPtr, touchDevice);
    return (UIElement)Noesis.Extend.GetProxy(cPtr, false);
  }

  public bool Focus() {
    bool ret = NoesisGUI_PINVOKE.UIElement_Focus__SWIG_0(swigCPtr);
    return ret;
  }

  public bool Focus(bool engage) {
    bool ret = NoesisGUI_PINVOKE.UIElement_Focus__SWIG_1(swigCPtr, engage);
    return ret;
  }

  public void InvalidateMeasure() {
    NoesisGUI_PINVOKE.UIElement_InvalidateMeasure(swigCPtr);
  }

  public bool IsMeasureValid() {
    bool ret = NoesisGUI_PINVOKE.UIElement_IsMeasureValid(swigCPtr);
    return ret;
  }

  public void Measure(Size availableSize) {
    NoesisGUI_PINVOKE.UIElement_Measure(swigCPtr, ref availableSize);
  }

  public void InvalidateArrange() {
    NoesisGUI_PINVOKE.UIElement_InvalidateArrange(swigCPtr);
  }

  public bool IsArrangeValid() {
    bool ret = NoesisGUI_PINVOKE.UIElement_IsArrangeValid(swigCPtr);
    return ret;
  }

  public void Arrange(Rect finalRect) {
    NoesisGUI_PINVOKE.UIElement_Arrange(swigCPtr, ref finalRect);
  }

  public void InvalidateVisual() {
    NoesisGUI_PINVOKE.UIElement_InvalidateVisual(swigCPtr);
  }

  public void UpdateLayout() {
    NoesisGUI_PINVOKE.UIElement_UpdateLayout(swigCPtr);
  }

  public virtual bool MoveFocus(TraversalRequest request) {
    bool ret = NoesisGUI_PINVOKE.UIElement_MoveFocus(swigCPtr, TraversalRequest.getCPtr(request));
    return ret;
  }

  public virtual DependencyObject PredictFocus(FocusNavigationDirection direction) {
    IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_PredictFocus(swigCPtr, (int)direction);
    return (DependencyObject)Noesis.Extend.GetProxy(cPtr, false);
  }

  public void RaiseEvent(RoutedEventArgs e) {
    NoesisGUI_PINVOKE.UIElement_RaiseEvent(swigCPtr, RoutedEventArgs.getCPtr(e));
  }

  public static DependencyProperty AllowDropProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_AllowDropProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty ClipProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_ClipProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty ClipToBoundsProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_ClipToBoundsProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty EffectProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_EffectProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty FocusableProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_FocusableProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsEnabledProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsEnabledProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsFocusedProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsFocusedProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsHitTestVisibleProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsHitTestVisibleProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsKeyboardFocusedProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsKeyboardFocusedProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsKeyboardFocusWithinProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsKeyboardFocusWithinProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsMouseCapturedProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsMouseCapturedProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsMouseCaptureWithinProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsMouseCaptureWithinProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsMouseDirectlyOverProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsMouseDirectlyOverProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsMouseOverProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsMouseOverProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsManipulationEnabledProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsManipulationEnabledProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsTapEnabledProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsTapEnabledProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsDoubleTapEnabledProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsDoubleTapEnabledProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsHoldingEnabledProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsHoldingEnabledProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsRightTapEnabledProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsRightTapEnabledProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty IsVisibleProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsVisibleProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty OpacityMaskProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_OpacityMaskProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty OpacityProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_OpacityProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty RenderTransformOriginProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_RenderTransformOriginProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty RenderTransformProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_RenderTransformProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty Transform3DProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_Transform3DProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static DependencyProperty VisibilityProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_VisibilityProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent GotFocusEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_GotFocusEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent GotKeyboardFocusEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_GotKeyboardFocusEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent GotMouseCaptureEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_GotMouseCaptureEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent KeyDownEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_KeyDownEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent KeyUpEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_KeyUpEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent LostFocusEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_LostFocusEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent LostKeyboardFocusEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_LostKeyboardFocusEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent LostMouseCaptureEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_LostMouseCaptureEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent MouseDownEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_MouseDownEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent MouseEnterEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_MouseEnterEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent MouseLeaveEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_MouseLeaveEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent MouseLeftButtonDownEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_MouseLeftButtonDownEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent MouseLeftButtonUpEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_MouseLeftButtonUpEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent MouseMoveEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_MouseMoveEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent MouseRightButtonDownEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_MouseRightButtonDownEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent MouseRightButtonUpEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_MouseRightButtonUpEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent MouseUpEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_MouseUpEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent MouseWheelEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_MouseWheelEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent TouchDownEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_TouchDownEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent TouchMoveEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_TouchMoveEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent TouchUpEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_TouchUpEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent TouchEnterEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_TouchEnterEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent TouchLeaveEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_TouchLeaveEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent GotTouchCaptureEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_GotTouchCaptureEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent LostTouchCaptureEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_LostTouchCaptureEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewTouchDownEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_PreviewTouchDownEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewTouchMoveEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_PreviewTouchMoveEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewTouchUpEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_PreviewTouchUpEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent ManipulationStartingEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_ManipulationStartingEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent ManipulationStartedEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_ManipulationStartedEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent ManipulationDeltaEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_ManipulationDeltaEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent ManipulationInertiaStartingEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_ManipulationInertiaStartingEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent ManipulationCompletedEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_ManipulationCompletedEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent TappedEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_TappedEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent DoubleTappedEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_DoubleTappedEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent HoldingEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_HoldingEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent RightTappedEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_RightTappedEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewGotKeyboardFocusEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_PreviewGotKeyboardFocusEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewKeyDownEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_PreviewKeyDownEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewKeyUpEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_PreviewKeyUpEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewLostKeyboardFocusEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_PreviewLostKeyboardFocusEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewMouseDownEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_PreviewMouseDownEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewMouseLeftButtonDownEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_PreviewMouseLeftButtonDownEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewMouseLeftButtonUpEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_PreviewMouseLeftButtonUpEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewMouseMoveEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_PreviewMouseMoveEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewMouseRightButtonDownEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_PreviewMouseRightButtonDownEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewMouseRightButtonUpEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_PreviewMouseRightButtonUpEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewMouseUpEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_PreviewMouseUpEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewMouseWheelEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_PreviewMouseWheelEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewTextInputEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_PreviewTextInputEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent QueryCursorEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_QueryCursorEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent TextInputEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_TextInputEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewQueryContinueDragEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_PreviewQueryContinueDragEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent QueryContinueDragEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_QueryContinueDragEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewGiveFeedbackEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_PreviewGiveFeedbackEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent GiveFeedbackEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_GiveFeedbackEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewDragEnterEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_PreviewDragEnterEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent DragEnterEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_DragEnterEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewDragOverEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_PreviewDragOverEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent DragOverEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_DragOverEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewDragLeaveEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_PreviewDragLeaveEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent DragLeaveEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_DragLeaveEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent PreviewDropEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_PreviewDropEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public static RoutedEvent DropEvent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_DropEvent_get();
      return (RoutedEvent)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public bool AllowDrop {
    set {
      NoesisGUI_PINVOKE.UIElement_AllowDrop_set(swigCPtr, value);
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_AllowDrop_get(swigCPtr);
      return ret;
    } 
  }

  public Geometry Clip {
    set {
      NoesisGUI_PINVOKE.UIElement_Clip_set(swigCPtr, Geometry.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_Clip_get(swigCPtr);
      return (Geometry)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public bool ClipToBounds {
    set {
      NoesisGUI_PINVOKE.UIElement_ClipToBounds_set(swigCPtr, value);
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_ClipToBounds_get(swigCPtr);
      return ret;
    } 
  }

  public Effect Effect {
    set {
      NoesisGUI_PINVOKE.UIElement_Effect_set(swigCPtr, Effect.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_Effect_get(swigCPtr);
      Effect ret = (cPtr == IntPtr.Zero) ? null : new Effect(cPtr, false);
      return ret;
    } 
  }

  public bool Focusable {
    set {
      NoesisGUI_PINVOKE.UIElement_Focusable_set(swigCPtr, value);
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_Focusable_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsEnabled {
    set {
      NoesisGUI_PINVOKE.UIElement_IsEnabled_set(swigCPtr, value);
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_IsEnabled_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsFocused {
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_IsFocused_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsHitTestVisible {
    set {
      NoesisGUI_PINVOKE.UIElement_IsHitTestVisible_set(swigCPtr, value);
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_IsHitTestVisible_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsKeyboardFocused {
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_IsKeyboardFocused_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsKeyboardFocusWithin {
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_IsKeyboardFocusWithin_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsMouseCaptured {
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_IsMouseCaptured_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsMouseCaptureWithin {
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_IsMouseCaptureWithin_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsMouseDirectlyOver {
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_IsMouseDirectlyOver_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsMouseOver {
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_IsMouseOver_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsManipulationEnabled {
    set {
      NoesisGUI_PINVOKE.UIElement_IsManipulationEnabled_set(swigCPtr, value);
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_IsManipulationEnabled_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsTapEnabled {
    set {
      NoesisGUI_PINVOKE.UIElement_IsTapEnabled_set(swigCPtr, value);
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_IsTapEnabled_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsDoubleTapEnabled {
    set {
      NoesisGUI_PINVOKE.UIElement_IsDoubleTapEnabled_set(swigCPtr, value);
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_IsDoubleTapEnabled_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsHoldingEnabled {
    set {
      NoesisGUI_PINVOKE.UIElement_IsHoldingEnabled_set(swigCPtr, value);
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_IsHoldingEnabled_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsRightTapEnabled {
    set {
      NoesisGUI_PINVOKE.UIElement_IsRightTapEnabled_set(swigCPtr, value);
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_IsRightTapEnabled_get(swigCPtr);
      return ret;
    } 
  }

  public bool IsVisible {
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_IsVisible_get(swigCPtr);
      return ret;
    } 
  }

  public Brush OpacityMask {
    set {
      NoesisGUI_PINVOKE.UIElement_OpacityMask_set(swigCPtr, Brush.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_OpacityMask_get(swigCPtr);
      return (Brush)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public float Opacity {
    set {
      NoesisGUI_PINVOKE.UIElement_Opacity_set(swigCPtr, value);
    } 
    get {
      float ret = NoesisGUI_PINVOKE.UIElement_Opacity_get(swigCPtr);
      return ret;
    } 
  }

  public Point RenderTransformOrigin {
    set {
      NoesisGUI_PINVOKE.UIElement_RenderTransformOrigin_set(swigCPtr, ref value);
    }

    get {
      IntPtr ret = NoesisGUI_PINVOKE.UIElement_RenderTransformOrigin_get(swigCPtr);
      if (ret != IntPtr.Zero) {
        return Marshal.PtrToStructure<Point>(ret);
      }
      else {
        return new Point();
      }
    }

  }

  public Transform RenderTransform {
    set {
      NoesisGUI_PINVOKE.UIElement_RenderTransform_set(swigCPtr, Transform.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_RenderTransform_get(swigCPtr);
      return (Transform)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public Transform3D Transform3D {
    set {
      NoesisGUI_PINVOKE.UIElement_Transform3D_set(swigCPtr, Transform3D.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_Transform3D_get(swigCPtr);
      return (Transform3D)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public Visibility Visibility {
    set {
      NoesisGUI_PINVOKE.UIElement_Visibility_set(swigCPtr, (int)value);
    } 
    get {
      Visibility ret = (Visibility)NoesisGUI_PINVOKE.UIElement_Visibility_get(swigCPtr);
      return ret;
    } 
  }

  public CommandBindingCollection CommandBindings {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_CommandBindings_get(swigCPtr);
      return (CommandBindingCollection)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public InputBindingCollection InputBindings {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_InputBindings_get(swigCPtr);
      return (InputBindingCollection)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public Size DesiredSize {
    get {
      IntPtr ret = NoesisGUI_PINVOKE.UIElement_DesiredSize_get(swigCPtr);
      if (ret != IntPtr.Zero) {
        return Marshal.PtrToStructure<Size>(ret);
      }
      else {
        return new Size();
      }
    }

  }

  public Size RenderSize {
    get {
      IntPtr ret = NoesisGUI_PINVOKE.UIElement_RenderSize_get(swigCPtr);
      if (ret != IntPtr.Zero) {
        return Marshal.PtrToStructure<Size>(ret);
      }
      else {
        return new Size();
      }
    }

  }

  public Mouse Mouse {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_Mouse_get(swigCPtr);
      Mouse ret = (cPtr == IntPtr.Zero) ? null : new Mouse(cPtr, false);
      return ret;
    } 
  }

  public Keyboard Keyboard {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_Keyboard_get(swigCPtr);
      return (Keyboard)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  protected void IgnoreLayout(bool ignore) {
    NoesisGUI_PINVOKE.UIElement_IgnoreLayout(swigCPtr, ignore);
  }

  internal new static IntPtr Extend(string typeName) {
    return NoesisGUI_PINVOKE.Extend_UIElement(Marshal.StringToHGlobalAnsi(typeName));
  }
}

}

