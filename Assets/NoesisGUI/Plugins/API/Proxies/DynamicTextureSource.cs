//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;

namespace Noesis
{

public class DynamicTextureSource : ImageSource {
  internal new static DynamicTextureSource CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new DynamicTextureSource(cPtr, cMemoryOwn);
  }

  internal DynamicTextureSource(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(DynamicTextureSource obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  protected DynamicTextureSource() {
  }

  public delegate Texture TextureRenderCallback(RenderDevice device, object user);
  public DynamicTextureSource(uint width, uint height, TextureRenderCallback callback, object user):
    base(Create(width, height, callback, user), true) {
  }

  #region Private members

  private static IntPtr Create(uint width, uint height, TextureRenderCallback callback, object user) {
    CallbackInfo info = new CallbackInfo { Callback = callback };
    int callbackId = info.GetHashCode();
    _callbacks[callbackId] = info;
    IntPtr userPtr = Noesis.Extend.GetInstanceHandle(user).Handle;
    return DynamicTextureSource_Create(width, height, callbackId, _removeCallback, _renderCallback, userPtr);
  }

  private struct CallbackInfo {
    public TextureRenderCallback Callback;
  }

  private delegate IntPtr NoesisTextureRenderCallback(int callbackId, IntPtr devicePtr, IntPtr userPtr);
  private static NoesisTextureRenderCallback _renderCallback = OnTextureRender;
  [MonoPInvokeCallback(typeof(NoesisTextureRenderCallback))]
  private static IntPtr OnTextureRender(int callbackId, IntPtr devicePtr, IntPtr userPtr) {
    try {
      if (Noesis.Extend.Initialized) {
        CallbackInfo info = _callbacks[callbackId];
        RenderDevice device = new RenderDevice(devicePtr, false);
        object user = Noesis.Extend.GetProxy(userPtr, false);
        Texture texture = info.Callback(device, user);
        return Noesis.Extend.GetInstanceHandle(texture).Handle;
      }
    }
    catch (Exception e) {
      Error.UnhandledException(e);
    }
    return IntPtr.Zero;
  }

  private delegate void NoesisRemoveCallback(int callbackId);
  private static NoesisRemoveCallback _removeCallback = OnRemoveCallback;
  [MonoPInvokeCallback(typeof(NoesisRemoveCallback))]
  private static void OnRemoveCallback(int callbackId) {
    try {
      _callbacks.Remove(callbackId);
    }
    catch (Exception e) {
      Error.UnhandledException(e);
    }
  }

  private static Dictionary<int, CallbackInfo> _callbacks = new Dictionary<int, CallbackInfo>();

  [DllImport(Library.Name)]
  private static extern IntPtr DynamicTextureSource_Create(uint width, uint height, int callbackId,
      NoesisRemoveCallback removeCallback, NoesisTextureRenderCallback renderCallback, IntPtr user);

  #endregion

  public int PixelWidth {
    get {
      int ret = NoesisGUI_PINVOKE.DynamicTextureSource_PixelWidth_get(swigCPtr);
      return ret;
    } 
  }

  public int PixelHeight {
    get {
      int ret = NoesisGUI_PINVOKE.DynamicTextureSource_PixelHeight_get(swigCPtr);
      return ret;
    } 
  }

}

}

